import java.util.ArrayList;

/**
 * A linked list based priority queue. Each node in the linked list 
 * has two fields: a name and a priority, with 9 being the highest 
 * priority and 0 being the lowest. Nodes with the same priority are 
 * kept in the order of which they were inserted. Any thread that invokes 
 * insert on a full list must be blocked, and wait for space to become available.
 * 
 * @author Nick Burrin
 *
 */
public monitor class PQueue {
	ArrayList<Node> list;
	private int MAX;
	/**
	 * Creates a Priority queue with max size m
	 * @param m
	 */
	public PQueue(int m){
		list = new ArrayList<Node>();
		this.MAX = m;
	}
	
	/**
	 * Inserts the name with its priority in the PQueue
	 * Returns -1 if name exists in the list
	 * Otherwise returns the current position in the list where the name was inserted
	 * The method will block when the list is full
	 * @param name
	 * @param pri
	 * @return
	 */
	public int insert(String name, int pri){
		Node newNode = new Node(name, pri);
		if(list.contains(newNode)){
			return -1;
		}
		
		waituntil(list.size() < MAX);

		for(int i = 0; i < list.size(); i++){
			if(pri > list.get(i).priority){	
				//Scan the list until you find the first element with a lower priority
				list.add(i, newNode);
				return i;
			}
		}

		//If you've made it here, then this element has the lowest priority
		//Insert it as the last element (or the first element is list is empty)
		list.add(newNode);
		return list.size() - 1;
	}
	
	/**
	 * Returns the position of the name in the list
	 * Returns -1 if the name is not found
	 * @param name
	 * @return
	 */
	public int search(String name){
		int index = list.indexOf(new Node(name, -1));
		
		return index;
	}
	
	/**
	 * Returns the name with the highest priority in the list
	 * If the list is empty, the method blocks
	 * Finally, the name is deleted from the list
	 * @return
	 */
	public String getFirst(){
		waituntil(list.size() > 0);
		return list.remove(0).name;
	}
}

/**
 * Stores the priority and String value so that 
 * we don't have to use a mapping that involves keys.
 */
class Node{
	String name;
	int priority;

	public Node(String n, int p){
		this.name = n;
		this.priority = p;
	}
	
	public boolean equals(Object other){
		if(other instanceof Node){
			return this.name.equals(((Node)other).name);
		}
		else{
			return false;
		}
	}
	
	public int hashCode(){
		return this.name.length() * this.priority;
	}

	public String toString(){
		return name + "-" + priority;
	}
}
